# This is the MinD Blaster Global Configuration File.

# All configuration keys related to configuration files are located at the following section:
configuration:
{
    # Config file version (Mandatory Key).
    # This variable allow us to enable backward compatibility with older configurations files.
    # Please don't modify this key if you are not sure about it's functionality.
    # Default value: N/A
    config_file_version = 1;
};

# All configuration keys related to log files are located at the following section:
logs:
{
    # Internal log file directory (Mandatory Key).
    # This key indicates where internal log file must be written.
    # Make sure MinD has write permissions in this directory.
    # Default value: N/A
    internal_dir = "./";

    # Traffic log file directory (Optional Key).
    # This key indicates where traffic log file must be written.
    # If it is not configured, logs will be writen at internal_log_dir pointed directory.
    # Default value: Same configured at internal_log_dir key.
    traffic_dir = "./";

    # Memory buffer reserved for traffic logs (Optional Key).
    # This is a performance tunning key. It indicates in MB how much ram memory MinD can reserve for logs.
    # Acepted values are 0 to 100.
    # Default value: 10
    memory_buffer_mb = 10;
    
    # Logs fast dump (Optional Key).
    # This is a performance tunning key.
    # When true, logs will be written immediately to disk and memory_buffer_mb key will be ignored.
    # Default value: false
    fast_dump = false;

    # Internal Log output by message type (Optional Key).
    #
    # Internal MinD log (mind.log):
    # INFO:      1  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1
    # WARNING:   2  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0
    # ERROR:     4  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0
    # Operating System Log (syslog):
    # INFO:      8  0 0 0 0  0 0 0 0  0 0 0 0  1 0 0 0
    # WARNING:  16  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0
    # ERROR:    32  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0
    # Estandard output for error (stderr)
    # INFO:     64  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0
    # WARNING: 128  0 0 0 0  0 0 0 0  1 0 0 0  0 0 0 0
    # ERROR:   256  0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 0
    #
    # Default value: 511 (Write everything to anyplace)
    # Note: keep in mind that this configuration is readed after
    #       MinD has done several things, So if an error occurs while
    #       loading it's possible to see some messages at syslog or
    #       stderr even when you don't have configured this option.
    # Important: 0 value will be ignored, use 512 value to blank
    #            all bits (Silent mode).
    internal_output_mask = 7;

    # Log field separator (Optional Key).
    # String for separating traffic.log fields, it supports C style characters like \t, \n, etc.
    # Default value: \t
    field_separator = "\t";

    # Log line ending (Optional Key).
    # String for ending access log lines. it supports C stile characters like \t, \n, etc.
    # Default value: \n
    end_line = "\n";
};

# All configuration keys related to application are located at the following section:
application:
{
    pid_file = "/var/run/mind.pid";
    run_user = "proxy";
    run_group = "proxy";
    run_foreground = false;
};

# All configuration keys related to server main configuration are located at the following section:
server:
{
    network:
    {
        listen:
        {
            # Listen Address (Mandatory Key).
            # Use this option to restrict which interfaces/protocols MinD will bind to.
            address = "0.0.0.0";
    
            # Listen Port (Mandatory Key).
            # Configures what port MinD listen for.
            port = 8080;
        };
    };

    engine:
    {
        # Max allowed threads (Mandatory Key).
        # This is a performance tweaking configuration key.
        # MinD Blaster uses a Leader-Follower algorithm for attending requests.
        # To configure more threads than CPU's your machine has will become a memory waste.
        max_threads = 2;

        cpu:
        {
            # CPU Binding list (Mandatory Key).
            # This is a performance tweaking configuration key.
            # The following list allows you to configure which CPUs MinD must to use.
            # Only keys setted to true will be taken in account. You can add as CPU keys as your machine has.  
            binding:
            {
                cpu0 = true;
                cpu1 = true;
                cpu2 = false;
                cpu3 = false;
            };

            # Sets priority to MinD workers (Optional Key).
            # This is a performance tweaking configuration key.
            # range from 0 (most favorable scheduling) to 39 (least favorable).
            # Default value: 20
            scheduling = 0;
        };

        # Request queue size (Mandatory Key).
        # This is a performance tweaking configuration key.
        # Don't modify this value if you are not sure about it.
        # This key indicates the limit of simultaneous connections MinD can process. 
        request_queue_size = 10000;
    };
};

